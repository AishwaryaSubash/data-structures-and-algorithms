#include <bits/stdc++.h>
using namespace std;
int main()
{
    vector<int> nums = {2, 2, 1};
    vector<int> a;
    unordered_map<int, int> m;
    for (int i : nums)
    {
        m[i]++;
    }
    for (pair<int, int> i : m)
    {
        if (i.second == 1)
        {
            a.push_back(i.first);
        }
        if (a.size() >= 2)
            break;
    }
    return a;
}




#include <bits/stdc++.h>
using namespace std;
int main()
{
    vector<int> nums = {2, 2, 1};
    unordered_map<int, int> m;
    for (int i : nums)
    {
        m[i]++;
    }
    for (pair<int, int> i : m)
    {
        if (i.second == 1)
        {
            cout << i.first;
           
        }
    }
}







class Solution {
public:
    bool isPowerOfTwo(int val) {
         float v = val;
    if(val == 1)
    return true;
    while (true)
    {
      
   if (v == 1 && val % 2 == 0)
        {
            return true;
           
        }
        else if (v < 1)
        {
           return false;
            
        }
        v /= 2;
    }
    return false;
    }
};


/////
vector<int> ans;
    for (int i = 0; i < code.size(); i++)
    {
        int sum = 0;
        int index = (k < 0) ? i - 1 : i + 1;
        for (int j = 0; j < abs(k); j++)
        {
            sum += code.at((k < 0) ? abs(int(code.size() + index)) % code.size() : index % code.size());
            (k < 0) ? index-- : index++;
        }
        ans.push_back(sum);
    }